/**
 * This class is generated by jOOQ
 */
package com.infsystem.infsystem.databse.jooq.model.tables;


import com.infsystem.infsystem.databse.jooq.model.Inf;
import com.infsystem.infsystem.databse.jooq.model.Keys;
import com.infsystem.infsystem.databse.jooq.model.tables.records.BookRecord;

import java.math.BigDecimal;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Book extends TableImpl<BookRecord> {

    private static final long serialVersionUID = -1012131677;

    /**
     * The reference instance of <code>inf.book</code>
     */
    public static final Book BOOK = new Book();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BookRecord> getRecordType() {
        return BookRecord.class;
    }

    /**
     * The column <code>inf.book.id</code>.
     */
    public final TableField<BookRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>inf.book.availableQty</code>.
     */
    public final TableField<BookRecord, Integer> AVAILABLEQTY = createField("availableQty", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>inf.book.pendingQty</code>.
     */
    public final TableField<BookRecord, Integer> PENDINGQTY = createField("pendingQty", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>inf.book.name</code>.
     */
    public final TableField<BookRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR.length(120), this, "");

    /**
     * The column <code>inf.book.medium</code>.
     */
    public final TableField<BookRecord, Integer> MEDIUM = createField("medium", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>inf.book.grade</code>.
     */
    public final TableField<BookRecord, Integer> GRADE = createField("grade", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>inf.book.authorName</code>.
     */
    public final TableField<BookRecord, String> AUTHORNAME = createField("authorName", org.jooq.impl.SQLDataType.VARCHAR.length(120), this, "");

    /**
     * The column <code>inf.book.noOfPages</code>.
     */
    public final TableField<BookRecord, Integer> NOOFPAGES = createField("noOfPages", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>inf.book.status</code>.
     */
    public final TableField<BookRecord, Integer> STATUS = createField("status", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>inf.book.price</code>.
     */
    public final TableField<BookRecord, BigDecimal> PRICE = createField("price", org.jooq.impl.SQLDataType.DECIMAL.precision(8, 2), this, "");

    /**
     * Create a <code>inf.book</code> table reference
     */
    public Book() {
        this("book", null);
    }

    /**
     * Create an aliased <code>inf.book</code> table reference
     */
    public Book(String alias) {
        this(alias, BOOK);
    }

    private Book(String alias, Table<BookRecord> aliased) {
        this(alias, aliased, null);
    }

    private Book(String alias, Table<BookRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Inf.INF;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<BookRecord, Integer> getIdentity() {
        return Keys.IDENTITY_BOOK;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<BookRecord> getPrimaryKey() {
        return Keys.KEY_BOOK_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<BookRecord>> getKeys() {
        return Arrays.<UniqueKey<BookRecord>>asList(Keys.KEY_BOOK_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<BookRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<BookRecord, ?>>asList(Keys.FK_BOOK_MEDIUM, Keys.FK_GRADE, Keys.FK_BOOK_STATE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Book as(String alias) {
        return new Book(alias, this);
    }

    /**
     * Rename this table
     */
    public Book rename(String name) {
        return new Book(name, null);
    }
}
