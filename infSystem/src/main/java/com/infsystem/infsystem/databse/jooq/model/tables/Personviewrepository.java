/**
 * This class is generated by jOOQ
 */
package com.infsystem.infsystem.databse.jooq.model.tables;


import com.infsystem.infsystem.databse.jooq.model.Inf;
import com.infsystem.infsystem.databse.jooq.model.tables.records.PersonviewrepositoryRecord;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.TableImpl;


/**
 * VIEW
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Personviewrepository extends TableImpl<PersonviewrepositoryRecord> {

    private static final long serialVersionUID = -1274806883;

    /**
     * The reference instance of <code>inf.personviewrepository</code>
     */
    public static final Personviewrepository PERSONVIEWREPOSITORY = new Personviewrepository();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PersonviewrepositoryRecord> getRecordType() {
        return PersonviewrepositoryRecord.class;
    }

    /**
     * The column <code>inf.personviewrepository.id</code>.
     */
    public final TableField<PersonviewrepositoryRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>inf.personviewrepository.name</code>.
     */
    public final TableField<PersonviewrepositoryRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR.length(61), this, "");

    /**
     * The column <code>inf.personviewrepository.type</code>.
     */
    public final TableField<PersonviewrepositoryRecord, Integer> TYPE = createField("type", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * Create a <code>inf.personviewrepository</code> table reference
     */
    public Personviewrepository() {
        this("personviewrepository", null);
    }

    /**
     * Create an aliased <code>inf.personviewrepository</code> table reference
     */
    public Personviewrepository(String alias) {
        this(alias, PERSONVIEWREPOSITORY);
    }

    private Personviewrepository(String alias, Table<PersonviewrepositoryRecord> aliased) {
        this(alias, aliased, null);
    }

    private Personviewrepository(String alias, Table<PersonviewrepositoryRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "VIEW");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Inf.INF;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Personviewrepository as(String alias) {
        return new Personviewrepository(alias, this);
    }

    /**
     * Rename this table
     */
    public Personviewrepository rename(String name) {
        return new Personviewrepository(name, null);
    }
}
