/**
 * This class is generated by jOOQ
 */
package com.infsystem.infsystem.databse.jooq.model.tables;


import com.infsystem.infsystem.databse.jooq.model.Inf;
import com.infsystem.infsystem.databse.jooq.model.Keys;
import com.infsystem.infsystem.databse.jooq.model.tables.records.AddressRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Address extends TableImpl<AddressRecord> {

    private static final long serialVersionUID = -1752580041;

    /**
     * The reference instance of <code>inf.address</code>
     */
    public static final Address ADDRESS = new Address();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AddressRecord> getRecordType() {
        return AddressRecord.class;
    }

    /**
     * The column <code>inf.address.id</code>.
     */
    public final TableField<AddressRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>inf.address.userId</code>.
     */
    public final TableField<AddressRecord, Integer> USERID = createField("userId", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>inf.address.type</code>.
     */
    public final TableField<AddressRecord, Integer> TYPE = createField("type", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>inf.address.addressNo</code>.
     */
    public final TableField<AddressRecord, String> ADDRESSNO = createField("addressNo", org.jooq.impl.SQLDataType.VARCHAR.length(30), this, "");

    /**
     * The column <code>inf.address.addressStreet1</code>.
     */
    public final TableField<AddressRecord, String> ADDRESSSTREET1 = createField("addressStreet1", org.jooq.impl.SQLDataType.VARCHAR.length(30), this, "");

    /**
     * The column <code>inf.address.addressStreet2</code>.
     */
    public final TableField<AddressRecord, String> ADDRESSSTREET2 = createField("addressStreet2", org.jooq.impl.SQLDataType.VARCHAR.length(30), this, "");

    /**
     * The column <code>inf.address.addressStreet3</code>.
     */
    public final TableField<AddressRecord, String> ADDRESSSTREET3 = createField("addressStreet3", org.jooq.impl.SQLDataType.VARCHAR.length(30), this, "");

    /**
     * The column <code>inf.address.addressCity</code>.
     */
    public final TableField<AddressRecord, String> ADDRESSCITY = createField("addressCity", org.jooq.impl.SQLDataType.VARCHAR.length(30), this, "");

    /**
     * The column <code>inf.address.addressCountry</code>.
     */
    public final TableField<AddressRecord, String> ADDRESSCOUNTRY = createField("addressCountry", org.jooq.impl.SQLDataType.VARCHAR.length(30), this, "");

    /**
     * The column <code>inf.address.contactPreson</code>.
     */
    public final TableField<AddressRecord, String> CONTACTPRESON = createField("contactPreson", org.jooq.impl.SQLDataType.VARCHAR.length(128), this, "");

    /**
     * The column <code>inf.address.telephoneNumber</code>.
     */
    public final TableField<AddressRecord, String> TELEPHONENUMBER = createField("telephoneNumber", org.jooq.impl.SQLDataType.VARCHAR.length(15), this, "");

    /**
     * Create a <code>inf.address</code> table reference
     */
    public Address() {
        this("address", null);
    }

    /**
     * Create an aliased <code>inf.address</code> table reference
     */
    public Address(String alias) {
        this(alias, ADDRESS);
    }

    private Address(String alias, Table<AddressRecord> aliased) {
        this(alias, aliased, null);
    }

    private Address(String alias, Table<AddressRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Inf.INF;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<AddressRecord, Integer> getIdentity() {
        return Keys.IDENTITY_ADDRESS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<AddressRecord> getPrimaryKey() {
        return Keys.KEY_ADDRESS_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<AddressRecord>> getKeys() {
        return Arrays.<UniqueKey<AddressRecord>>asList(Keys.KEY_ADDRESS_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<AddressRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<AddressRecord, ?>>asList(Keys.FK_ADDRESS_PERSON, Keys.FK_ADDRESS_ADDRESSTYPE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Address as(String alias) {
        return new Address(alias, this);
    }

    /**
     * Rename this table
     */
    public Address rename(String name) {
        return new Address(name, null);
    }
}
