/**
 * This class is generated by jOOQ
 */
package com.infsystem.infsystem.databse.jooq.model.tables;


import com.infsystem.infsystem.databse.jooq.model.Inf;
import com.infsystem.infsystem.databse.jooq.model.Keys;
import com.infsystem.infsystem.databse.jooq.model.tables.records.TaskExicuteMethodRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TaskExicuteMethod extends TableImpl<TaskExicuteMethodRecord> {

    private static final long serialVersionUID = 625310321;

    /**
     * The reference instance of <code>inf.task_exicute_method</code>
     */
    public static final TaskExicuteMethod TASK_EXICUTE_METHOD = new TaskExicuteMethod();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TaskExicuteMethodRecord> getRecordType() {
        return TaskExicuteMethodRecord.class;
    }

    /**
     * The column <code>inf.task_exicute_method.id</code>.
     */
    public final TableField<TaskExicuteMethodRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>inf.task_exicute_method.name</code>.
     */
    public final TableField<TaskExicuteMethodRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR.length(30), this, "");

    /**
     * Create a <code>inf.task_exicute_method</code> table reference
     */
    public TaskExicuteMethod() {
        this("task_exicute_method", null);
    }

    /**
     * Create an aliased <code>inf.task_exicute_method</code> table reference
     */
    public TaskExicuteMethod(String alias) {
        this(alias, TASK_EXICUTE_METHOD);
    }

    private TaskExicuteMethod(String alias, Table<TaskExicuteMethodRecord> aliased) {
        this(alias, aliased, null);
    }

    private TaskExicuteMethod(String alias, Table<TaskExicuteMethodRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Inf.INF;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<TaskExicuteMethodRecord, Integer> getIdentity() {
        return Keys.IDENTITY_TASK_EXICUTE_METHOD;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<TaskExicuteMethodRecord> getPrimaryKey() {
        return Keys.KEY_TASK_EXICUTE_METHOD_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<TaskExicuteMethodRecord>> getKeys() {
        return Arrays.<UniqueKey<TaskExicuteMethodRecord>>asList(Keys.KEY_TASK_EXICUTE_METHOD_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TaskExicuteMethod as(String alias) {
        return new TaskExicuteMethod(alias, this);
    }

    /**
     * Rename this table
     */
    public TaskExicuteMethod rename(String name) {
        return new TaskExicuteMethod(name, null);
    }
}
