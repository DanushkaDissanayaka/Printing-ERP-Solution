/**
 * This class is generated by jOOQ
 */
package com.infsystem.infsystem.databse.jooq.model.tables;


import com.infsystem.infsystem.databse.jooq.model.Inf;
import com.infsystem.infsystem.databse.jooq.model.Keys;
import com.infsystem.infsystem.databse.jooq.model.tables.records.JobTaskRecord;

import java.sql.Date;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JobTask extends TableImpl<JobTaskRecord> {

    private static final long serialVersionUID = -1033160876;

    /**
     * The reference instance of <code>inf.job_task</code>
     */
    public static final JobTask JOB_TASK = new JobTask();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JobTaskRecord> getRecordType() {
        return JobTaskRecord.class;
    }

    /**
     * The column <code>inf.job_task.id</code>.
     */
    public final TableField<JobTaskRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>inf.job_task.jobId</code>.
     */
    public final TableField<JobTaskRecord, Integer> JOBID = createField("jobId", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>inf.job_task.state</code>.
     */
    public final TableField<JobTaskRecord, Integer> STATE = createField("state", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>inf.job_task.taskType</code>.
     */
    public final TableField<JobTaskRecord, Integer> TASKTYPE = createField("taskType", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>inf.job_task.taskExicuteMethod</code>.
     */
    public final TableField<JobTaskRecord, Integer> TASKEXICUTEMETHOD = createField("taskExicuteMethod", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>inf.job_task.createDate</code>.
     */
    public final TableField<JobTaskRecord, Date> CREATEDATE = createField("createDate", org.jooq.impl.SQLDataType.DATE, this, "");

    /**
     * The column <code>inf.job_task.createBy</code>.
     */
    public final TableField<JobTaskRecord, Integer> CREATEBY = createField("createBy", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>inf.job_task.modifyDate</code>.
     */
    public final TableField<JobTaskRecord, Date> MODIFYDATE = createField("modifyDate", org.jooq.impl.SQLDataType.DATE, this, "");

    /**
     * The column <code>inf.job_task.modifyBy</code>.
     */
    public final TableField<JobTaskRecord, Integer> MODIFYBY = createField("modifyBy", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>inf.job_task.startDate</code>.
     */
    public final TableField<JobTaskRecord, Date> STARTDATE = createField("startDate", org.jooq.impl.SQLDataType.DATE, this, "");

    /**
     * The column <code>inf.job_task.endDate</code>.
     */
    public final TableField<JobTaskRecord, Date> ENDDATE = createField("endDate", org.jooq.impl.SQLDataType.DATE, this, "");

    /**
     * The column <code>inf.job_task.quantity</code>.
     */
    public final TableField<JobTaskRecord, Integer> QUANTITY = createField("quantity", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * Create a <code>inf.job_task</code> table reference
     */
    public JobTask() {
        this("job_task", null);
    }

    /**
     * Create an aliased <code>inf.job_task</code> table reference
     */
    public JobTask(String alias) {
        this(alias, JOB_TASK);
    }

    private JobTask(String alias, Table<JobTaskRecord> aliased) {
        this(alias, aliased, null);
    }

    private JobTask(String alias, Table<JobTaskRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Inf.INF;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<JobTaskRecord, Integer> getIdentity() {
        return Keys.IDENTITY_JOB_TASK;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<JobTaskRecord> getPrimaryKey() {
        return Keys.KEY_JOB_TASK_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<JobTaskRecord>> getKeys() {
        return Arrays.<UniqueKey<JobTaskRecord>>asList(Keys.KEY_JOB_TASK_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<JobTaskRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<JobTaskRecord, ?>>asList(Keys.FK_JOBTASK_JOB, Keys.FK_JOBTASK_TASKSTATE, Keys.FK_JOBTASK_TASKEXICUTEMETHOD, Keys.FK_JOBTASK_TASKTYPE, Keys.FK_JOBTASK_PERSON_CREATEBY, Keys.FK_JOBTASK_PERSON_MODIFYBY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JobTask as(String alias) {
        return new JobTask(alias, this);
    }

    /**
     * Rename this table
     */
    public JobTask rename(String name) {
        return new JobTask(name, null);
    }
}
