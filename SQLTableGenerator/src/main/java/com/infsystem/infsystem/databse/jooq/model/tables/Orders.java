/**
 * This class is generated by jOOQ
 */
package com.infsystem.infsystem.databse.jooq.model.tables;


import com.infsystem.infsystem.databse.jooq.model.Inf;
import com.infsystem.infsystem.databse.jooq.model.Keys;
import com.infsystem.infsystem.databse.jooq.model.tables.records.OrdersRecord;

import java.sql.Date;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Orders extends TableImpl<OrdersRecord> {

    private static final long serialVersionUID = 884706522;

    /**
     * The reference instance of <code>inf.orders</code>
     */
    public static final Orders ORDERS = new Orders();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OrdersRecord> getRecordType() {
        return OrdersRecord.class;
    }

    /**
     * The column <code>inf.orders.id</code>.
     */
    public final TableField<OrdersRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>inf.orders.createDate</code>.
     */
    public final TableField<OrdersRecord, Date> CREATEDATE = createField("createDate", org.jooq.impl.SQLDataType.DATE, this, "");

    /**
     * The column <code>inf.orders.createBy</code>.
     */
    public final TableField<OrdersRecord, Integer> CREATEBY = createField("createBy", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>inf.orders.modifyDate</code>.
     */
    public final TableField<OrdersRecord, Date> MODIFYDATE = createField("modifyDate", org.jooq.impl.SQLDataType.DATE, this, "");

    /**
     * The column <code>inf.orders.modifyBy</code>.
     */
    public final TableField<OrdersRecord, Integer> MODIFYBY = createField("modifyBy", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>inf.orders.client</code>.
     */
    public final TableField<OrdersRecord, Integer> CLIENT = createField("client", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>inf.orders.state</code>.
     */
    public final TableField<OrdersRecord, Integer> STATE = createField("state", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * Create a <code>inf.orders</code> table reference
     */
    public Orders() {
        this("orders", null);
    }

    /**
     * Create an aliased <code>inf.orders</code> table reference
     */
    public Orders(String alias) {
        this(alias, ORDERS);
    }

    private Orders(String alias, Table<OrdersRecord> aliased) {
        this(alias, aliased, null);
    }

    private Orders(String alias, Table<OrdersRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Inf.INF;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<OrdersRecord, Integer> getIdentity() {
        return Keys.IDENTITY_ORDERS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<OrdersRecord> getPrimaryKey() {
        return Keys.KEY_ORDERS_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<OrdersRecord>> getKeys() {
        return Arrays.<UniqueKey<OrdersRecord>>asList(Keys.KEY_ORDERS_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<OrdersRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<OrdersRecord, ?>>asList(Keys.FK_ORDER_PERSON_CREATEBY, Keys.FK_ORDER_PERSON_MODIFYBY, Keys.FK_ORDER_PERSON_CLIENT, Keys.FK_ORDER_ODERSTATE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Orders as(String alias) {
        return new Orders(alias, this);
    }

    /**
     * Rename this table
     */
    public Orders rename(String name) {
        return new Orders(name, null);
    }
}
