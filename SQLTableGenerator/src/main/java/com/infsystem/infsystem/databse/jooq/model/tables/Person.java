/**
 * This class is generated by jOOQ
 */
package com.infsystem.infsystem.databse.jooq.model.tables;


import com.infsystem.infsystem.databse.jooq.model.Inf;
import com.infsystem.infsystem.databse.jooq.model.Keys;
import com.infsystem.infsystem.databse.jooq.model.tables.records.PersonRecord;

import java.sql.Date;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Person extends TableImpl<PersonRecord> {

    private static final long serialVersionUID = -2041854442;

    /**
     * The reference instance of <code>inf.person</code>
     */
    public static final Person PERSON = new Person();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PersonRecord> getRecordType() {
        return PersonRecord.class;
    }

    /**
     * The column <code>inf.person.id</code>.
     */
    public final TableField<PersonRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>inf.person.createDate</code>.
     */
    public final TableField<PersonRecord, Date> CREATEDATE = createField("createDate", org.jooq.impl.SQLDataType.DATE, this, "");

    /**
     * The column <code>inf.person.addBy</code>.
     */
    public final TableField<PersonRecord, Integer> ADDBY = createField("addBy", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>inf.person.modifyDate</code>.
     */
    public final TableField<PersonRecord, Date> MODIFYDATE = createField("modifyDate", org.jooq.impl.SQLDataType.DATE, this, "");

    /**
     * The column <code>inf.person.modifyBy</code>.
     */
    public final TableField<PersonRecord, Integer> MODIFYBY = createField("modifyBy", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>inf.person.fName</code>.
     */
    public final TableField<PersonRecord, String> FNAME = createField("fName", org.jooq.impl.SQLDataType.VARCHAR.length(30), this, "");

    /**
     * The column <code>inf.person.lName</code>.
     */
    public final TableField<PersonRecord, String> LNAME = createField("lName", org.jooq.impl.SQLDataType.VARCHAR.length(30), this, "");

    /**
     * The column <code>inf.person.dob</code>.
     */
    public final TableField<PersonRecord, Date> DOB = createField("dob", org.jooq.impl.SQLDataType.DATE, this, "");

    /**
     * The column <code>inf.person.nic</code>.
     */
    public final TableField<PersonRecord, String> NIC = createField("nic", org.jooq.impl.SQLDataType.VARCHAR.length(15), this, "");

    /**
     * The column <code>inf.person.email</code>.
     */
    public final TableField<PersonRecord, String> EMAIL = createField("email", org.jooq.impl.SQLDataType.VARCHAR.length(60), this, "");

    /**
     * The column <code>inf.person.type</code>.
     */
    public final TableField<PersonRecord, Integer> TYPE = createField("type", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>inf.person.status</code>.
     */
    public final TableField<PersonRecord, Integer> STATUS = createField("status", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * Create a <code>inf.person</code> table reference
     */
    public Person() {
        this("person", null);
    }

    /**
     * Create an aliased <code>inf.person</code> table reference
     */
    public Person(String alias) {
        this(alias, PERSON);
    }

    private Person(String alias, Table<PersonRecord> aliased) {
        this(alias, aliased, null);
    }

    private Person(String alias, Table<PersonRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Inf.INF;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<PersonRecord, Integer> getIdentity() {
        return Keys.IDENTITY_PERSON;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<PersonRecord> getPrimaryKey() {
        return Keys.KEY_PERSON_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<PersonRecord>> getKeys() {
        return Arrays.<UniqueKey<PersonRecord>>asList(Keys.KEY_PERSON_PRIMARY, Keys.KEY_PERSON_EMAIL);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<PersonRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<PersonRecord, ?>>asList(Keys.FK_PERSON_PERSONADDBY, Keys.FK_PERSON_PERSONMODIFYBY, Keys.FK_PERSON_PERSONTYPE, Keys.FK_PERSON_PERSONSTATUS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Person as(String alias) {
        return new Person(alias, this);
    }

    /**
     * Rename this table
     */
    public Person rename(String name) {
        return new Person(name, null);
    }
}
