/**
 * This class is generated by jOOQ
 */
package com.infsystem.infsystem.databse.jooq.model.tables;


import com.infsystem.infsystem.databse.jooq.model.Inf;
import com.infsystem.infsystem.databse.jooq.model.Keys;
import com.infsystem.infsystem.databse.jooq.model.tables.records.JobRecord;

import java.sql.Date;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Job extends TableImpl<JobRecord> {

    private static final long serialVersionUID = 121941627;

    /**
     * The reference instance of <code>inf.job</code>
     */
    public static final Job JOB = new Job();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JobRecord> getRecordType() {
        return JobRecord.class;
    }

    /**
     * The column <code>inf.job.id</code>.
     */
    public final TableField<JobRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>inf.job.productId</code>.
     */
    public final TableField<JobRecord, Integer> PRODUCTID = createField("productId", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>inf.job.orderId</code>.
     */
    public final TableField<JobRecord, Integer> ORDERID = createField("orderId", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>inf.job.createDate</code>.
     */
    public final TableField<JobRecord, Date> CREATEDATE = createField("createDate", org.jooq.impl.SQLDataType.DATE, this, "");

    /**
     * The column <code>inf.job.createBy</code>.
     */
    public final TableField<JobRecord, Integer> CREATEBY = createField("createBy", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>inf.job.modifyDate</code>.
     */
    public final TableField<JobRecord, Date> MODIFYDATE = createField("modifyDate", org.jooq.impl.SQLDataType.DATE, this, "");

    /**
     * The column <code>inf.job.modifyBy</code>.
     */
    public final TableField<JobRecord, Integer> MODIFYBY = createField("modifyBy", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>inf.job.startDate</code>.
     */
    public final TableField<JobRecord, Date> STARTDATE = createField("startDate", org.jooq.impl.SQLDataType.DATE, this, "");

    /**
     * The column <code>inf.job.endDate</code>.
     */
    public final TableField<JobRecord, Date> ENDDATE = createField("endDate", org.jooq.impl.SQLDataType.DATE, this, "");

    /**
     * The column <code>inf.job.quantity</code>.
     */
    public final TableField<JobRecord, Integer> QUANTITY = createField("quantity", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>inf.job.state</code>.
     */
    public final TableField<JobRecord, Integer> STATE = createField("state", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * Create a <code>inf.job</code> table reference
     */
    public Job() {
        this("job", null);
    }

    /**
     * Create an aliased <code>inf.job</code> table reference
     */
    public Job(String alias) {
        this(alias, JOB);
    }

    private Job(String alias, Table<JobRecord> aliased) {
        this(alias, aliased, null);
    }

    private Job(String alias, Table<JobRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Inf.INF;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<JobRecord, Integer> getIdentity() {
        return Keys.IDENTITY_JOB;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<JobRecord> getPrimaryKey() {
        return Keys.KEY_JOB_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<JobRecord>> getKeys() {
        return Arrays.<UniqueKey<JobRecord>>asList(Keys.KEY_JOB_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<JobRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<JobRecord, ?>>asList(Keys.FK_JOB_ORDER, Keys.FK_JOB_PERSON_CREATEBY, Keys.FK_JOB_PERSON_MODIFYBY, Keys.FK_JOB_ODERSTATE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Job as(String alias) {
        return new Job(alias, this);
    }

    /**
     * Rename this table
     */
    public Job rename(String name) {
        return new Job(name, null);
    }
}
